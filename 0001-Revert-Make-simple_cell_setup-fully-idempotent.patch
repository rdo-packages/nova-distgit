From 0078940694501ca55c31e0bbb3445465bf1c365f Mon Sep 17 00:00:00 2001
From: Alan Pevec <alan.pevec@redhat.com>
Date: Fri, 13 Jan 2017 16:48:22 +0100
Subject: [PATCH] Revert "Make simple_cell_setup fully idempotent"

Temporary until https://bugs.launchpad.net/nova/+bug/1656276
is resolved.

This reverts commit 34761e678f286cce2479d320356c9196d67cc4fb.
---
 nova/cmd/manage.py                  | 12 +++---------
 nova/tests/unit/test_nova_manage.py | 22 +++++++++-------------
 2 files changed, 12 insertions(+), 22 deletions(-)

diff --git a/nova/cmd/manage.py b/nova/cmd/manage.py
index 70413fa..ef28ccf 100644
--- a/nova/cmd/manage.py
+++ b/nova/cmd/manage.py
@@ -1096,17 +1096,11 @@ class CellV2Commands(object):
         try:
             cell0_mapping = self.map_cell0()
         except db_exc.DBDuplicateEntry:
-            print(_('Cell0 is already setup'))
-            cell0_mapping = objects.CellMapping.get_by_uuid(
-                ctxt, objects.CellMapping.CELL0_UUID)
-
+            print('Already setup, nothing to do.')
+            return 0
         # Run migrations so cell0 is usable
         with context.target_cell(ctxt, cell0_mapping):
-            try:
-                migration.db_sync(None, context=ctxt)
-            except db_exc.DBError as ex:
-                print(_('Unable to sync cell0 schema: %s') % ex)
-
+            migration.db_sync(None, context=ctxt)
         cell_uuid = self._map_cell_and_hosts(transport_url)
         if cell_uuid is None:
             # There are no compute hosts which means no cell_mapping was
diff --git a/nova/tests/unit/test_nova_manage.py b/nova/tests/unit/test_nova_manage.py
index 512a2db..a4ebf2a 100644
--- a/nova/tests/unit/test_nova_manage.py
+++ b/nova/tests/unit/test_nova_manage.py
@@ -17,7 +17,6 @@ import sys
 
 import fixtures
 import mock
-from oslo_db import exception as db_exc
 from oslo_utils import uuidutils
 from six.moves import StringIO
 
@@ -1126,7 +1125,7 @@ class CellV2CommandsTestCase(test.NoDBTestCase):
         self.assertEqual('fake://netloc/nova_api_cell0',
                          cell_mapping.database_connection)
 
-    def _test_migrate_simple_command(self, cell0_sync_fail=False):
+    def _test_migrate_simple_command(self, first_call=True):
         ctxt = context.RequestContext()
         CONF.set_default('connection',
                          'fake://netloc/nova_api',
@@ -1154,11 +1153,12 @@ class CellV2CommandsTestCase(test.NoDBTestCase):
         @mock.patch.object(uuidutils, 'generate_uuid',
                 return_value=cell_uuid)
         def _test(mock_gen_uuid, mock_db_sync):
-            if cell0_sync_fail:
-                mock_db_sync.side_effect = db_exc.DBError
             result = self.commands.simple_cell_setup(transport_url)
-            mock_db_sync.assert_called_once_with(
-                None, context=test.MatchType(context.RequestContext))
+            if first_call:
+                mock_db_sync.assert_called_once_with(
+                    None, context=test.MatchType(context.RequestContext))
+            else:
+                mock_db_sync.assert_not_called()
             return result
 
         r = _test()
@@ -1184,15 +1184,11 @@ class CellV2CommandsTestCase(test.NoDBTestCase):
     def test_simple_command_single(self):
         self._test_migrate_simple_command()
 
-    def test_simple_command_cell0_fail(self):
-        # Make sure that if db_sync fails, we still do all the other
-        # bits
-        self._test_migrate_simple_command(cell0_sync_fail=True)
-
     def test_simple_command_multiple(self):
-        # Make sure that the command is idempotent
-        self._test_migrate_simple_command()
         self._test_migrate_simple_command()
+        with mock.patch.object(self.commands, '_map_cell_and_hosts') as m:
+            self._test_migrate_simple_command(first_call=False)
+            self.assertFalse(m.called)
 
     def test_simple_command_cellsv1(self):
         self.flags(enable=True, group='cells')
-- 
2.9.3

